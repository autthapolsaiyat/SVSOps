// FILE: src/pages/ProductsPage.tsx
import React, { useEffect, useState } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Search, X, Plus, Pencil } from "lucide-react";
import { toast } from "sonner";
import {
  listProducts, type Product, type ProductList,
  listTeams, listGroups, type TeamItem, type GroupItem,
} from "@/lib/api.products";

type OriginT = "all" | "domestic" | "foreign" | "unassigned";

export default function ProductsPage() {
  const nav = useNavigate();
  const [sp, setSp] = useSearchParams();

  // table/data state
  const [items, setItems] = useState<Product[]>([]);
  const [total, setTotal] = useState(0);
  const [pages, setPages] = useState(1);
  const [page, setPage] = useState(1);
  const [perPage, setPerPage] = useState(10);
  const [sort, setSort] = useState<"sku" | "name" | "unit">("sku");
  const [order, setOrder] = useState<"asc" | "desc">("asc");
  const [q, setQ] = useState("");
  const [origin, setOrigin] = useState<OriginT>("all");

  // filters: team/group (sync กับ URL)
  const [team, setTeam] = useState<string>("");
  const [group, setGroup] = useState<string>("");

  // dropdown sources
  const [teams, setTeams] = useState<TeamItem[]>([]);
  const [groups, setGroups] = useState<GroupItem[]>([]);

  const [loading, setLoading] = useState(false);
  const [errMsg, setErrMsg] = useState<string | null>(null);

  // --- Hydrate state from URL once on mount
  useEffect(() => {
    const q0 = sp.get("q") ?? "";
    const o0 = (sp.get("origin") as OriginT) ?? "all";
    const p0 = Number(sp.get("page") || "1");
    const pp0 = Number(sp.get("perPage") || "10");
    const t0 = sp.get("team_code") ?? "";
    const g0 = sp.get("group_code") ?? "";
    if (q0) setQ(q0);
    if (["all","domestic","foreign","unassigned"].includes(o0)) setOrigin(o0);
    if (Number.isFinite(p0) && p0>0) setPage(p0);
    if (Number.isFinite(pp0) && [10,20,50].includes(pp0)) setPerPage(pp0);
    if (t0) setTeam(t0);
    if (g0) setGroup(g0);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // load dropdown lists (master)
  useEffect(() => {
    (async () => {
      try {
        const t = await listTeams();
        setTeams(t.items || []);
      } catch {}
      try {
        const g = await listGroups();
        setGroups(g.items || []);
      } catch {}
    })();
  }, []);

  // debounce search
  const [qDebounced, setQDebounced] = useState("");
  useEffect(() => {
    const t = setTimeout(() => setQDebounced(q.trim()), 350);
    return () => clearTimeout(t);
  }, [q]);

  // write state -> URL (querystring)
  useEffect(() => {
    const next = new URLSearchParams(sp);
    // q
    if (qDebounced) next.set("q", qDebounced); else next.delete("q");
    // origin
    if (origin && origin !== "all") next.set("origin", origin); else next.delete("origin");
    // team/group
    if (team) next.set("team_code", team); else next.delete("team_code");
    if (group) next.set("group_code", group); else next.delete("group_code");
    // page/perPage
    if (page > 1) next.set("page", String(page)); else next.delete("page");
    if (perPage !== 10) next.set("perPage", String(perPage)); else next.delete("perPage");
    if (next.toString() !== sp.toString()) setSp(next, { replace: true });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [qDebounced, origin, page, perPage, team, group]);

  function badge(v?: boolean | null) {
    if (v === true)  return <span className="px-2 py-0.5 rounded text-xs border bg-emerald-600/20 text-emerald-300 border-emerald-500/30">ในประเทศ</span>;
    if (v === false) return <span className="px-2 py-0.5 rounded text-xs border bg-slate-600/20 text-slate-200 border-slate-500/30">ต่างประเทศ</span>;
    return <span className="px-2 py-0.5 rounded text-xs border bg-zinc-600/20 text-zinc-200 border-zinc-500/30">ไม่ระบุ</span>;
  }

  async function load() {
    setLoading(true);
    try {
      const data: ProductList = await listProducts({
        q: qDebounced || undefined,
        page, per_page: perPage, sort, order,
        origin,                       // all/domestic/foreign/unassigned
        team_code: team || undefined, // master code
        group_code: group || undefined,
      });
      setItems(Array.isArray(data.items) ? data.items : []);
      setTotal(Number(data.total ?? 0));
      setPages(Math.max(1, Number((data as any).pages ?? Math.ceil((data.total ?? 0) / perPage))));
      setErrMsg(null);
    } catch (err: any) {
      console.error("[Products] load error:", err);
      setItems([]); setTotal(0); setPages(1);
      const msg = String(err?.message || "โหลดข้อมูลไม่สำเร็จ");
      setErrMsg(msg); toast.error(msg);
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => { load(); /* eslint-disable-next-line */ }, []);
  useEffect(() => { load(); /* eslint-disable-next-line */ }, [qDebounced, page, perPage, sort, order, origin, team, group]);

  function changeSort(col: "sku" | "name" | "unit") {
    if (col === sort) setOrder(order === "asc" ? "desc" : "asc");
    else { setSort(col); setOrder("asc"); }
    setPage(1);
  }

  const from = total ? (page - 1) * perPage + 1 : 0;
  const to   = Math.min(page * perPage, total);

  return (
    <div className="p-6 space-y-4">
      <section className="app-section overflow-hidden">
        <div className="flex flex-wrap items-center gap-2">
          <h2 className="text-xl font-semibold">สินค้า</h2>
          <div className="flex items-center gap-2 relative z-20">
            <div className="relative">
              <Search className="w-4 h-4 absolute left-2 top-1/2 -translate-y-1/2 opacity-60" />
              <Input
                className="pl-8 pr-8 w-64 min-w-[12rem] max-w-full"
                placeholder="ค้นหา SKU / ชื่อ"
                value={q}
                onChange={(e)=>{ setQ(e.target.value); setPage(1);}}
                onKeyDown={(e)=>{ if(e.key==="Enter") setPage(1); }}
              />
              {!!q && (
                <button
                  type="button"
                  aria-label="ล้างคำค้นหา"
                  className="absolute right-2 top-1/2 -translate-y-1/2 opacity-70 hover:opacity-100"
                  onClick={()=>{ setQ(""); setPage(1); }}
                ><X className="w-4 h-4" /></button>
              )}
            </div>

            {/* ฟิลเตอร์ที่มา */}
            <select
              className="border rounded-md px-2 py-1 text-sm bg-transparent relative z-10"
              value={origin}
              onChange={(e)=>{ setOrigin(e.target.value as OriginT); setPage(1); }}
              title="ที่มา (ในประเทศ/ต่างประเทศ/ไม่ระบุ)"
            >
              <option value="all">ทุกที่มา</option>
              <option value="domestic">ในประเทศ</option>
              <option value="foreign">ต่างประเทศ</option>
              <option value="unassigned">ไม่ระบุ</option>
            </select>

            {/* ฟิลเตอร์ทีม */}
            <select
              className="border rounded-md px-2 py-1 text-sm bg-transparent relative z-10"
              value={team}
              onChange={(e)=>{ setTeam(e.target.value); setPage(1); }}
              title="ทีม"
            >
              <option value="">ทุกทีม</option>
              {teams.map((t)=>(
                <option key={t.code} value={t.code}>
                  {t.code}{t.label ? ` — ${t.label}` : ""}
                </option>
              ))}
            </select>

            {/* ฟิลเตอร์กลุ่ม */}
            <select
              className="border rounded-md px-2 py-1 text-sm bg-transparent relative z-10"
              value={group}
              onChange={(e)=>{ setGroup(e.target.value); setPage(1); }}
              title="กลุ่มสินค้า"
            >
              <option value="">ทุกกลุ่ม</option>
              {groups.map((g)=>(
                <option key={g.code} value={g.code}>
                  {g.code}{g.name ? ` — ${g.name}` : ""}
                </option>
              ))}
            </select>

            <select
              className="border rounded-md px-2 py-1 text-sm bg-transparent relative z-10"
              value={perPage}
              onChange={(e)=>{ setPerPage(Number(e.target.value)); setPage(1); }}
            >
              {[10,20,50].map(n=> <option key={n} value={n}>{n}/หน้า</option>)}
            </select>

            <Button size="sm" onClick={() => nav("/products/new")}>
              <Plus className="w-4 h-4 mr-1" /> ป้อนสินค้า
            </Button>
          </div>
        </div>

        {errMsg && (
          <div className="mt-3 rounded-md border border-red-500/30 bg-red-500/10 px-3 py-2 text-sm text-red-600">
            {errMsg}
          </div>
        )}

        <div className="mt-3">
          {loading ? (
            <p>กำลังโหลด...</p>
          ) : (
            <>
              <Table className="bg-transparent">
                <TableHeader>
                  <TableRow className="bg-transparent">
                    <TableHead onClick={()=>changeSort("sku")}  className="cursor-pointer select-none">SKU{sort==="sku" ? (order==="asc"?" ▲":" ▼"):""}</TableHead>
                    <TableHead onClick={()=>changeSort("name")} className="cursor-pointer select-none">ชื่อ{sort==="name"?(order==="asc"?" ▲":" ▼"):""}</TableHead>
                    <TableHead onClick={()=>changeSort("unit")} className="cursor-pointer select-none">หน่วย{sort==="unit"?(order==="asc"?" ▲":" ▼"):""}</TableHead>
                    <TableHead>ทีม</TableHead>
                    <TableHead>กลุ่ม</TableHead>
                    <TableHead>สถานะ</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {items.map((p) => (
                    <TableRow key={p.sku} className="bg-transparent">
                      <TableCell className="font-mono">{p.sku}</TableCell>
                      <TableCell>{p.name}</TableCell>
                      <TableCell>{p.unit}</TableCell>
                      <TableCell>{p.team_code || "-"}</TableCell>
                      <TableCell>{p.group_code || "-"}</TableCell>
                      <TableCell>{badge((p as any).is_domestic ?? null)}</TableCell>
                      <TableCell className="text-right">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => nav(`/products/edit/${encodeURIComponent(p.sku)}`)}
                        >
                          <Pencil className="w-3.5 h-3.5 mr-1" /> แก้ไข
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                  {!loading && items.length === 0 && (
                    <TableRow className="bg-transparent">
                      <TableCell colSpan={7} className="text-center py-8 opacity-70">ไม่พบข้อมูล</TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>

              <div className="mt-4 flex items-center justify-between text-sm">
                <div>แสดง {from}–{to} จาก {total} รายการ</div>
                <div className="space-x-2">
                  <Button size="sm" variant="outline" disabled={page<=1}      onClick={()=>setPage(p=>p-1)}>ก่อนหน้า</Button>
                  <span className="px-2">หน้า {page}/{Math.max(pages,1)}</span>
                  <Button size="sm" variant="outline" disabled={page>=pages}   onClick={()=>setPage(p=>p+1)}>ถัดไป</Button>
                </div>
              </div>
            </>
          )}
        </div>
      </section>
    </div>
  );
}

