// FILE: src/lib/auth.ts
import { api } from "@/lib/api.client";

// ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ API URL ‡∏à‡∏≤‡∏Å .env (vite)
const API = import.meta.env.VITE_API_URL || "http://localhost:8080/api";

// ü™µ Debug: log ‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠ frontend ‡πÇ‡∏´‡∏•‡∏î
console.log("‚úÖ [auth.ts] VITE_API_URL =", import.meta.env.VITE_API_URL);

export type AuthUser = {
  id: string;
  username: string;
  email?: string;
  roles?: string[];
};

const TOKEN_KEYS = ["access_token", "token"];
const USER_KEY = "auth_user";
const PERMS_KEY = "auth_perms";

// -----------------------------
// storage helpers
// -----------------------------
export function setToken(token: string) {
  for (const k of TOKEN_KEYS) localStorage.setItem(k, token);
}

export function getToken(): string | null {
  // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ api.client ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô token
  for (const k of TOKEN_KEYS) {
    const v = localStorage.getItem(k);
    if (v) return v;
  }
  return null;
}

export function clearAuthStorage() {
  try {
    for (const k of TOKEN_KEYS) localStorage.removeItem(k);
    localStorage.removeItem(USER_KEY);
    localStorage.removeItem(PERMS_KEY);
  } catch {}
}

// ‚úÖ aliases for legacy imports
export const clearAuth = clearAuthStorage;

export function saveProfile(u: AuthUser, perms: string[]) {
  localStorage.setItem(USER_KEY, JSON.stringify(u));
  localStorage.setItem(PERMS_KEY, JSON.stringify(perms || []));
}

export function getUser(): AuthUser | null {
  try {
    const raw = localStorage.getItem(USER_KEY);
    return raw ? (JSON.parse(raw) as AuthUser) : null;
  } catch {
    return null;
  }
}

export function getPerms(): string[] {
  try {
    const raw = localStorage.getItem(PERMS_KEY);
    return raw ? (JSON.parse(raw) as string[]) : [];
  } catch {
    return [];
  }
}

export function isSuperadmin(u: AuthUser | null): boolean {
  return !!u?.roles?.some((r) => r === "superadmin" || r === "sysop");
}

// -----------------------------
// utils
// -----------------------------
async function parseMaybeJSON(res: Response): Promise<any> {
  const ct = res.headers.get("content-type") || "";
  if (ct.includes("application/json")) {
    try { return await res.json(); } catch {}
  }
  const text = await res.text().catch(() => "");
  try { return JSON.parse(text); } catch { return { _raw: text }; }
}

// -----------------------------
// auth flows
// -----------------------------
export async function login(username: string, password: string) {
  // 1) login -> token (‡πÉ‡∏ä‡πâ BASE API ‡πÄ‡∏™‡∏°‡∏≠)
  const r = await fetch(`${API}/auth/login`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ username, password }),
  });

  const body = await parseMaybeJSON(r);
  if (!r.ok) {
    const detail =
      (body && body.detail) ||
      (typeof body?._raw === "string" ? body._raw.slice(0, 300) : "") ||
      `${r.status} ${r.statusText}`;
    throw new Error(detail || "Login failed");
  }

  const token: string | undefined = body?.access_token;
  if (!token) throw new Error("Malformed login response (no access_token)");
  setToken(token);

  // 2) /auth/me -> profile & perms
  //    api() ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏ô‡∏ö Authorization header ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô api.client)
  const meRaw = await api<any>("/auth/me");
  const user: AuthUser = {
    id: meRaw.id,
    username: meRaw.username,
    email: meRaw.email,
    roles: meRaw.roles || [],
  };
  const perms: string[] = meRaw.permissions || meRaw.perms || [];
  saveProfile(user, perms);

  return { user, perms, token };
}

export function logout(redirect = "/login") {
  clearAuthStorage();
  if (redirect) location.assign(redirect);
}

// ‡∏à‡∏±‡∏ö 401 ‡∏ó‡∏µ‡πà dispatch ‡∏à‡∏≤‡∏Å api.client.ts ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå session ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
export function listenAuth401(redirect = "/login") {
  window.addEventListener("auth:401", () => logout(redirect));
}

// ‚úÖ alias ‡πÉ‡∏´‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà import { onAuth401 } ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
export const onAuth401 = listenAuth401;

// utility ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ debug ‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
export function getAPIBase() { return API; }
